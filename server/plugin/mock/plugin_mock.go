// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bakurits/mattermost-plugin-anonymous/server/plugin (interfaces: Plugin)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/mattermost/mattermost-server/v5/model"
	plugin "github.com/mattermost/mattermost-server/v5/plugin"
	http "net/http"
	reflect "reflect"
)

// MockPlugin is a mock of Plugin interface
type MockPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockPluginMockRecorder
}

// MockPluginMockRecorder is the mock recorder for MockPlugin
type MockPluginMockRecorder struct {
	mock *MockPlugin
}

// NewMockPlugin creates a new mock instance
func NewMockPlugin(ctrl *gomock.Controller) *MockPlugin {
	mock := &MockPlugin{ctrl: ctrl}
	mock.recorder = &MockPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlugin) EXPECT() *MockPluginMockRecorder {
	return m.recorder
}

// OnActivate mocks base method
func (m *MockPlugin) OnActivate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnActivate")
	ret0, _ := ret[0].(error)
	return ret0
}

// OnActivate indicates an expected call of OnActivate
func (mr *MockPluginMockRecorder) OnActivate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnActivate", reflect.TypeOf((*MockPlugin)(nil).OnActivate))
}

// OnConfigurationChange mocks base method
func (m *MockPlugin) OnConfigurationChange() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnConfigurationChange")
	ret0, _ := ret[0].(error)
	return ret0
}

// OnConfigurationChange indicates an expected call of OnConfigurationChange
func (mr *MockPluginMockRecorder) OnConfigurationChange() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnConfigurationChange", reflect.TypeOf((*MockPlugin)(nil).OnConfigurationChange))
}

// SendEphemeralPost mocks base method
func (m *MockPlugin) SendEphemeralPost(arg0 string, arg1 *model.Post) *model.Post {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEphemeralPost", arg0, arg1)
	ret0, _ := ret[0].(*model.Post)
	return ret0
}

// SendEphemeralPost indicates an expected call of SendEphemeralPost
func (mr *MockPluginMockRecorder) SendEphemeralPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEphemeralPost", reflect.TypeOf((*MockPlugin)(nil).SendEphemeralPost), arg0, arg1)
}

// ServeHTTP mocks base method
func (m *MockPlugin) ServeHTTP(arg0 *plugin.Context, arg1 http.ResponseWriter, arg2 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTP", arg0, arg1, arg2)
}

// ServeHTTP indicates an expected call of ServeHTTP
func (mr *MockPluginMockRecorder) ServeHTTP(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockPlugin)(nil).ServeHTTP), arg0, arg1, arg2)
}
