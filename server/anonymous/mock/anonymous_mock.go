// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bakurits/mattermost-plugin-anonymous/server/anonymous (interfaces: Anonymous)

// Package mock is a generated GoMock package.
package mock

import (
	anonymous "github.com/bakurits/mattermost-plugin-anonymous/server/anonymous"
	config "github.com/bakurits/mattermost-plugin-anonymous/server/config"
	crypto "github.com/bakurits/mattermost-plugin-anonymous/server/crypto"
	gomock "github.com/golang/mock/gomock"
	model "github.com/mattermost/mattermost-server/v5/model"
	reflect "reflect"
)

// MockAnonymous is a mock of Anonymous interface
type MockAnonymous struct {
	ctrl     *gomock.Controller
	recorder *MockAnonymousMockRecorder
}

// MockAnonymousMockRecorder is the mock recorder for MockAnonymous
type MockAnonymousMockRecorder struct {
	mock *MockAnonymous
}

// NewMockAnonymous creates a new mock instance
func NewMockAnonymous(ctrl *gomock.Controller) *MockAnonymous {
	mock := &MockAnonymous{ctrl: ctrl}
	mock.recorder = &MockAnonymousMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAnonymous) EXPECT() *MockAnonymousMockRecorder {
	return m.recorder
}

// GetActivePlugins mocks base method
func (m *MockAnonymous) GetActivePlugins() ([]anonymous.PluginIdentifier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivePlugins")
	ret0, _ := ret[0].([]anonymous.PluginIdentifier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivePlugins indicates an expected call of GetActivePlugins
func (mr *MockAnonymousMockRecorder) GetActivePlugins() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivePlugins", reflect.TypeOf((*MockAnonymous)(nil).GetActivePlugins))
}

// GetConfiguration mocks base method
func (m *MockAnonymous) GetConfiguration() *config.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguration")
	ret0, _ := ret[0].(*config.Config)
	return ret0
}

// GetConfiguration indicates an expected call of GetConfiguration
func (mr *MockAnonymousMockRecorder) GetConfiguration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguration", reflect.TypeOf((*MockAnonymous)(nil).GetConfiguration))
}

// GetPublicKey mocks base method
func (m *MockAnonymous) GetPublicKey(arg0 string) (crypto.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey", arg0)
	ret0, _ := ret[0].(crypto.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey
func (mr *MockAnonymousMockRecorder) GetPublicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockAnonymous)(nil).GetPublicKey), arg0)
}

// GetUsersInChannel mocks base method
func (m *MockAnonymous) GetUsersInChannel(arg0, arg1 string, arg2, arg3 int) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersInChannel", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersInChannel indicates an expected call of GetUsersInChannel
func (mr *MockAnonymousMockRecorder) GetUsersInChannel(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersInChannel", reflect.TypeOf((*MockAnonymous)(nil).GetUsersInChannel), arg0, arg1, arg2, arg3)
}

// IsEncryptionEnabledForChannel mocks base method
func (m *MockAnonymous) IsEncryptionEnabledForChannel(arg0, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEncryptionEnabledForChannel", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEncryptionEnabledForChannel indicates an expected call of IsEncryptionEnabledForChannel
func (mr *MockAnonymousMockRecorder) IsEncryptionEnabledForChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEncryptionEnabledForChannel", reflect.TypeOf((*MockAnonymous)(nil).IsEncryptionEnabledForChannel), arg0, arg1)
}

// KVDelete mocks base method
func (m *MockAnonymous) KVDelete(arg0 string) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVDelete", arg0)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// KVDelete indicates an expected call of KVDelete
func (mr *MockAnonymousMockRecorder) KVDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVDelete", reflect.TypeOf((*MockAnonymous)(nil).KVDelete), arg0)
}

// KVGet mocks base method
func (m *MockAnonymous) KVGet(arg0 string) ([]byte, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVGet", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// KVGet indicates an expected call of KVGet
func (mr *MockAnonymousMockRecorder) KVGet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVGet", reflect.TypeOf((*MockAnonymous)(nil).KVGet), arg0)
}

// KVSet mocks base method
func (m *MockAnonymous) KVSet(arg0 string, arg1 []byte) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVSet", arg0, arg1)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// KVSet indicates an expected call of KVSet
func (mr *MockAnonymousMockRecorder) KVSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVSet", reflect.TypeOf((*MockAnonymous)(nil).KVSet), arg0, arg1)
}

// PublishWebSocketEvent mocks base method
func (m *MockAnonymous) PublishWebSocketEvent(arg0 string, arg1 map[string]interface{}, arg2 *model.WebsocketBroadcast) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishWebSocketEvent", arg0, arg1, arg2)
}

// PublishWebSocketEvent indicates an expected call of PublishWebSocketEvent
func (mr *MockAnonymousMockRecorder) PublishWebSocketEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWebSocketEvent", reflect.TypeOf((*MockAnonymous)(nil).PublishWebSocketEvent), arg0, arg1, arg2)
}

// SendEphemeralPost mocks base method
func (m *MockAnonymous) SendEphemeralPost(arg0 string, arg1 *model.Post) *model.Post {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEphemeralPost", arg0, arg1)
	ret0, _ := ret[0].(*model.Post)
	return ret0
}

// SendEphemeralPost indicates an expected call of SendEphemeralPost
func (mr *MockAnonymousMockRecorder) SendEphemeralPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEphemeralPost", reflect.TypeOf((*MockAnonymous)(nil).SendEphemeralPost), arg0, arg1)
}

// SetEncryptionStatusForChannel mocks base method
func (m *MockAnonymous) SetEncryptionStatusForChannel(arg0, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEncryptionStatusForChannel", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEncryptionStatusForChannel indicates an expected call of SetEncryptionStatusForChannel
func (mr *MockAnonymousMockRecorder) SetEncryptionStatusForChannel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEncryptionStatusForChannel", reflect.TypeOf((*MockAnonymous)(nil).SetEncryptionStatusForChannel), arg0, arg1, arg2)
}

// StartPluginChecks mocks base method
func (m *MockAnonymous) StartPluginChecks() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartPluginChecks")
	ret0, _ := ret[0].(error)
	return ret0
}

// StartPluginChecks indicates an expected call of StartPluginChecks
func (mr *MockAnonymousMockRecorder) StartPluginChecks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartPluginChecks", reflect.TypeOf((*MockAnonymous)(nil).StartPluginChecks))
}

// StorePublicKey mocks base method
func (m *MockAnonymous) StorePublicKey(arg0 string, arg1 crypto.PublicKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorePublicKey", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorePublicKey indicates an expected call of StorePublicKey
func (mr *MockAnonymousMockRecorder) StorePublicKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorePublicKey", reflect.TypeOf((*MockAnonymous)(nil).StorePublicKey), arg0, arg1)
}

// UnverifiedPlugins mocks base method
func (m *MockAnonymous) UnverifiedPlugins() []anonymous.PluginIdentifier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnverifiedPlugins")
	ret0, _ := ret[0].([]anonymous.PluginIdentifier)
	return ret0
}

// UnverifiedPlugins indicates an expected call of UnverifiedPlugins
func (mr *MockAnonymousMockRecorder) UnverifiedPlugins() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnverifiedPlugins", reflect.TypeOf((*MockAnonymous)(nil).UnverifiedPlugins))
}
