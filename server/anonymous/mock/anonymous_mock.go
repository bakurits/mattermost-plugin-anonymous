// Code generated by MockGen. DO NOT EDIT.
// Source: server/anonymous/anonymous.go

// Package mock is a generated GoMock package.
package mock

import (
	crypto "github.com/bakurits/mattermost-plugin-anonymous/server/crypto"
	store "github.com/bakurits/mattermost-plugin-anonymous/server/store"
	gomock "github.com/golang/mock/gomock"
	model "github.com/mattermost/mattermost-server/v5/model"
	reflect "reflect"
)

// MockAnonymous is a mock of Anonymous interface
type MockAnonymous struct {
	ctrl     *gomock.Controller
	recorder *MockAnonymousMockRecorder
}

// MockAnonymousMockRecorder is the mock recorder for MockAnonymous
type MockAnonymousMockRecorder struct {
	mock *MockAnonymous
}

// NewMockAnonymous creates a new mock instance
func NewMockAnonymous(ctrl *gomock.Controller) *MockAnonymous {
	mock := &MockAnonymous{ctrl: ctrl}
	mock.recorder = &MockAnonymousMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAnonymous) EXPECT() *MockAnonymousMockRecorder {
	return m.recorder
}

// SendEphemeralPost mocks base method
func (m *MockAnonymous) SendEphemeralPost(userID string, post *model.Post) *model.Post {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEphemeralPost", userID, post)
	ret0, _ := ret[0].(*model.Post)
	return ret0
}

// SendEphemeralPost indicates an expected call of SendEphemeralPost
func (mr *MockAnonymousMockRecorder) SendEphemeralPost(userID, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEphemeralPost", reflect.TypeOf((*MockAnonymous)(nil).SendEphemeralPost), userID, post)
}

// KVGet mocks base method
func (m *MockAnonymous) KVGet(key string) ([]byte, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVGet", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// KVGet indicates an expected call of KVGet
func (mr *MockAnonymousMockRecorder) KVGet(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVGet", reflect.TypeOf((*MockAnonymous)(nil).KVGet), key)
}

// KVSet mocks base method
func (m *MockAnonymous) KVSet(key string, value []byte) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVSet", key, value)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// KVSet indicates an expected call of KVSet
func (mr *MockAnonymousMockRecorder) KVSet(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVSet", reflect.TypeOf((*MockAnonymous)(nil).KVSet), key, value)
}

// KVDelete mocks base method
func (m *MockAnonymous) KVDelete(key string) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVDelete", key)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// KVDelete indicates an expected call of KVDelete
func (mr *MockAnonymousMockRecorder) KVDelete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVDelete", reflect.TypeOf((*MockAnonymous)(nil).KVDelete), key)
}

// LoadUser mocks base method
func (m *MockAnonymous) LoadUser(mattermostUserID string) (*store.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadUser", mattermostUserID)
	ret0, _ := ret[0].(*store.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadUser indicates an expected call of LoadUser
func (mr *MockAnonymousMockRecorder) LoadUser(mattermostUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadUser", reflect.TypeOf((*MockAnonymous)(nil).LoadUser), mattermostUserID)
}

// StoreUser mocks base method
func (m *MockAnonymous) StoreUser(user *store.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreUser indicates an expected call of StoreUser
func (mr *MockAnonymousMockRecorder) StoreUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreUser", reflect.TypeOf((*MockAnonymous)(nil).StoreUser), user)
}

// DeleteUser mocks base method
func (m *MockAnonymous) DeleteUser(mattermostUserID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", mattermostUserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockAnonymousMockRecorder) DeleteUser(mattermostUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockAnonymous)(nil).DeleteUser), mattermostUserID)
}

// StorePublicKey mocks base method
func (m *MockAnonymous) StorePublicKey(userID string, publicKey crypto.PublicKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorePublicKey", userID, publicKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorePublicKey indicates an expected call of StorePublicKey
func (mr *MockAnonymousMockRecorder) StorePublicKey(userID, publicKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorePublicKey", reflect.TypeOf((*MockAnonymous)(nil).StorePublicKey), userID, publicKey)
}

// GetPublicKey mocks base method
func (m *MockAnonymous) GetPublicKey(userID string) (crypto.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey", userID)
	ret0, _ := ret[0].(crypto.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey
func (mr *MockAnonymousMockRecorder) GetPublicKey(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockAnonymous)(nil).GetPublicKey), userID)
}

// MockPluginAPI is a mock of PluginAPI interface
type MockPluginAPI struct {
	ctrl     *gomock.Controller
	recorder *MockPluginAPIMockRecorder
}

// MockPluginAPIMockRecorder is the mock recorder for MockPluginAPI
type MockPluginAPIMockRecorder struct {
	mock *MockPluginAPI
}

// NewMockPluginAPI creates a new mock instance
func NewMockPluginAPI(ctrl *gomock.Controller) *MockPluginAPI {
	mock := &MockPluginAPI{ctrl: ctrl}
	mock.recorder = &MockPluginAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPluginAPI) EXPECT() *MockPluginAPIMockRecorder {
	return m.recorder
}

// SendEphemeralPost mocks base method
func (m *MockPluginAPI) SendEphemeralPost(userID string, post *model.Post) *model.Post {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEphemeralPost", userID, post)
	ret0, _ := ret[0].(*model.Post)
	return ret0
}

// SendEphemeralPost indicates an expected call of SendEphemeralPost
func (mr *MockPluginAPIMockRecorder) SendEphemeralPost(userID, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEphemeralPost", reflect.TypeOf((*MockPluginAPI)(nil).SendEphemeralPost), userID, post)
}

// KVGet mocks base method
func (m *MockPluginAPI) KVGet(key string) ([]byte, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVGet", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// KVGet indicates an expected call of KVGet
func (mr *MockPluginAPIMockRecorder) KVGet(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVGet", reflect.TypeOf((*MockPluginAPI)(nil).KVGet), key)
}

// KVSet mocks base method
func (m *MockPluginAPI) KVSet(key string, value []byte) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVSet", key, value)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// KVSet indicates an expected call of KVSet
func (mr *MockPluginAPIMockRecorder) KVSet(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVSet", reflect.TypeOf((*MockPluginAPI)(nil).KVSet), key, value)
}

// KVDelete mocks base method
func (m *MockPluginAPI) KVDelete(key string) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVDelete", key)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// KVDelete indicates an expected call of KVDelete
func (mr *MockPluginAPIMockRecorder) KVDelete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVDelete", reflect.TypeOf((*MockPluginAPI)(nil).KVDelete), key)
}
