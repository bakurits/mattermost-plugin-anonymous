// Code generated by MockGen. DO NOT EDIT.
// Source: server/utils/store/store.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/mattermost/mattermost-server/v5/model"
	reflect "reflect"
)

// MockStoreAPI is a mock of StoreAPI interface
type MockStoreAPI struct {
	ctrl     *gomock.Controller
	recorder *MockStoreAPIMockRecorder
}

// MockStoreAPIMockRecorder is the mock recorder for MockStoreAPI
type MockStoreAPIMockRecorder struct {
	mock *MockStoreAPI
}

// NewMockStoreAPI creates a new mock instance
func NewMockStoreAPI(ctrl *gomock.Controller) *MockStoreAPI {
	mock := &MockStoreAPI{ctrl: ctrl}
	mock.recorder = &MockStoreAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStoreAPI) EXPECT() *MockStoreAPIMockRecorder {
	return m.recorder
}

// KVGet mocks base method
func (m *MockStoreAPI) KVGet(key string) ([]byte, *model.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVGet", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*model.AppError)
	return ret0, ret1
}

// KVGet indicates an expected call of KVGet
func (mr *MockStoreAPIMockRecorder) KVGet(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVGet", reflect.TypeOf((*MockStoreAPI)(nil).KVGet), key)
}

// KVSet mocks base method
func (m *MockStoreAPI) KVSet(key string, value []byte) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVSet", key, value)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// KVSet indicates an expected call of KVSet
func (mr *MockStoreAPIMockRecorder) KVSet(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVSet", reflect.TypeOf((*MockStoreAPI)(nil).KVSet), key, value)
}

// KVDelete mocks base method
func (m *MockStoreAPI) KVDelete(key string) *model.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KVDelete", key)
	ret0, _ := ret[0].(*model.AppError)
	return ret0
}

// KVDelete indicates an expected call of KVDelete
func (mr *MockStoreAPIMockRecorder) KVDelete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KVDelete", reflect.TypeOf((*MockStoreAPI)(nil).KVDelete), key)
}

// MockKVStore is a mock of KVStore interface
type MockKVStore struct {
	ctrl     *gomock.Controller
	recorder *MockKVStoreMockRecorder
}

// MockKVStoreMockRecorder is the mock recorder for MockKVStore
type MockKVStoreMockRecorder struct {
	mock *MockKVStore
}

// NewMockKVStore creates a new mock instance
func NewMockKVStore(ctrl *gomock.Controller) *MockKVStore {
	mock := &MockKVStore{ctrl: ctrl}
	mock.recorder = &MockKVStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKVStore) EXPECT() *MockKVStoreMockRecorder {
	return m.recorder
}

// Load mocks base method
func (m *MockKVStore) Load(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load
func (mr *MockKVStoreMockRecorder) Load(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockKVStore)(nil).Load), key)
}

// Store mocks base method
func (m *MockKVStore) Store(key string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", key, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store
func (mr *MockKVStoreMockRecorder) Store(key, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockKVStore)(nil).Store), key, data)
}

// Delete mocks base method
func (m *MockKVStore) Delete(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockKVStoreMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKVStore)(nil).Delete), key)
}
